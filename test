import java.util.*;
import java.text.SimpleDateFormat;
import java.text.ParseException;
import java.io.*;

class Bus {
    int busID;
    String busNumber;
    String route;
    int capacity;
    double ticketPrice;
    String departureDate;
    String departureTime;
    int driverID;
    String driverName;

    public Bus(int busID, String busNumber, String route, int capacity, double ticketPrice, 
               String departureDate, String departureTime, int driverID, String driverName) {
        this.busID = busID;
        this.busNumber = busNumber;
        this.route = route;
        this.capacity = capacity;
        this.ticketPrice = ticketPrice;
        this.departureDate = departureDate;
        this.departureTime = departureTime;
        this.driverID = driverID;
        this.driverName = driverName;
    }

    public void updateTicketPrice(double price) {
        this.ticketPrice = price;
    }

    public void displayBusInfo() {
        System.out.println("Bus ID: " + busID + ", Number: " + busNumber + ", Route: " + route +
                ", Capacity: " + capacity + ", Ticket Price: $" + ticketPrice + 
                ", Departure: " + departureDate + " at " + departureTime +
                ", Driver ID: " + driverID + ", Driver Name: " + driverName);
    }
    
    // Convert bus object to CSV format string
    public String toCSV() {
        return busID + "," + busNumber + "," + route + "," + capacity + "," + 
               ticketPrice + "," + departureDate + "," + departureTime + "," + 
               driverID + "," + driverName;
    }
    
    // Parse a CSV line into a Bus object
    public static Bus fromCSV(String csvLine) {
        String[] parts = csvLine.split(",");
        if (parts.length == 9) {
            return new Bus(
                Integer.parseInt(parts[0]),    // busID
                parts[1],                      // busNumber
                parts[2],                      // route
                Integer.parseInt(parts[3]),    // capacity
                Double.parseDouble(parts[4]),  // ticketPrice
                parts[5],                      // departureDate
                parts[6],                      // departureTime
                Integer.parseInt(parts[7]),    // driverID
                parts[8]                       // driverName
            );
        }
        return null;
    }
}

class Booking {
    int bookingID;
    int busID;
    int userID;
    int seatsBooked;
    double totalPrice;
    String status;
    String departureDate;
    String departureTime;

    public Booking(int bookingID, int busID, int userID, int seatsBooked, double totalPrice, 
                  String status, String departureDate, String departureTime) {
        this.bookingID = bookingID;
        this.busID = busID;
        this.userID = userID;
        this.seatsBooked = seatsBooked;
        this.totalPrice = totalPrice;
        this.status = status;
        this.departureDate = departureDate;
        this.departureTime = departureTime;
    }

    public void displayBookingInfo() {
        System.out.println("Booking ID: " + bookingID + ", Bus ID: " + busID + ", User ID: " + userID +
                ", Seats: " + seatsBooked + ", Total Price: $" + totalPrice + ", Status: " + status +
                ", Departure: " + departureDate + " at " + departureTime);
    }
}

class User {
    int userID;
    String name;
    String email;
    String phoneNumber;
    List<Booking> bookingHistory = new ArrayList<>();

    public User(int userID, String name, String email, String phoneNumber) {
        this.userID = userID;
        this.name = name;
        this.email = email;
        this.phoneNumber = phoneNumber;
    }

    public List<Bus> searchBus(String route, List<Bus> buses) {
        List<Bus> result = new ArrayList<>();
        for (Bus bus : buses) {
            if (bus.route.equalsIgnoreCase(route)) {
                result.add(bus);
            }
        }
        return result;
    }

    public List<Bus> searchBusByDate(String date, List<Bus> buses) {
        List<Bus> result = new ArrayList<>();
        for (Bus bus : buses) {
            if (bus.departureDate.equals(date)) {
                result.add(bus);
            }
        }
        return result;
    }

    public Booking bookTicket(int busID, int seats, List<Bus> buses, List<Booking> bookings) {
        for (Bus bus : buses) {
            if (bus.busID == busID && bus.capacity >= seats) {
                bus.capacity -= seats;
                Booking booking = new Booking(
                    new Random().nextInt(1000), 
                    busID, 
                    this.userID, 
                    seats, 
                    bus.ticketPrice * seats, 
                    "Confirmed",
                    bus.departureDate,
                    bus.departureTime
                );
                bookingHistory.add(booking);
                bookings.add(booking);
                return booking;
            }
        }
        return null;
    }

    public void viewBookingHistory() {
        if (bookingHistory.isEmpty()) {
            System.out.println("No booking history found.");
        } else {
            System.out.println("Your Booking History:");
            for (Booking booking : bookingHistory) {
                booking.displayBookingInfo();
            }
        }
    }
}

class Admin {
    int userID;
    String name;
    String email;
    String phoneNumber;

    public Admin(int userID, String name, String email, String phoneNumber) {
        this.userID = userID;
        this.name = name;
        this.email = email;
        this.phoneNumber = phoneNumber;
    }

    public void addNewBus(List<Bus> buses, Bus bus) {
        buses.add(bus);
        System.out.println("Bus added successfully.");
    }

    public Bus searchBusById(List<Bus> buses, int busID) {
        for (Bus bus : buses) {
            if (bus.busID == busID) {
                return bus;
            }
        }
        return null;
    }

    public void editBus(List<Bus> buses, int busID, String newRoute, int newCapacity, 
                        double newPrice, String newDate, String newTime, 
                        int newDriverID, String newDriverName) {
        Bus bus = searchBusById(buses, busID);
        if (bus != null) {
            bus.route = newRoute;
            bus.capacity = newCapacity;
            bus.ticketPrice = newPrice;
            bus.departureDate = newDate;
            bus.departureTime = newTime;
            bus.driverID = newDriverID;
            bus.driverName = newDriverName;
            System.out.println("Bus details updated successfully.");
        } else {
            System.out.println("Bus not found.");
        }
    }

    public void removeBus(List<Bus> buses, int busID) {
        Bus bus = searchBusById(buses, busID);
        if (bus != null) {
            buses.remove(bus);
            System.out.println("Bus removed successfully.");
        } else {
            System.out.println("Bus not found.");
        }
    }

    public Booking searchBookingById(List<Booking> bookings, int bookingID) {
        for (Booking booking : bookings) {
            if (booking.bookingID == bookingID) {
                return booking;
            }
        }
        return null;
    }

    public void cancelBooking(List<Booking> bookings, int bookingID) {
        Booking booking = searchBookingById(bookings, bookingID);
        if (booking != null) {
            bookings.remove(booking);
            System.out.println("Booking canceled successfully.");
        } else {
            System.out.println("Booking not found.");
        }
    }

    public void viewAllBookings(List<Booking> bookings) {
        if (bookings.isEmpty()) {
            System.out.println("No bookings found.");
        } else {
            System.out.println("All Booking History:");
            for (Booking booking : bookings) {
                booking.displayBookingInfo();
            }
        }
    }
}

// Modified FileManager class to use Businfo.csv instead of book1.csv
class FileManager {
    private static final String CSV_FILE = "Businfo.csv";
    private static final String CSV_HEADER = "BusID,BusNumber,Route,Capacity,TicketPrice,DepartureDate,DepartureTime,DriverID,DriverName";
    
    // Save all buses to CSV file
    public static void saveBusesToCSV(List<Bus> buses) {
        try (PrintWriter writer = new PrintWriter(new FileWriter(CSV_FILE))) {
            // Write header
            writer.println(CSV_HEADER);
            
            // Write each bus to CSV
            for (Bus bus : buses) {
                writer.println(bus.toCSV());
            }
            System.out.println("Bus data saved to " + CSV_FILE + " successfully!");
        } catch (IOException e) {
            System.out.println("Error saving to CSV file: " + e.getMessage());
        }
    }
    
    // Load buses from CSV file
    public static List<Bus> loadBusesFromCSV() {
        List<Bus> buses = new ArrayList<>();
        File file = new File(CSV_FILE);
        
        // If file doesn't exist, return empty list
        if (!file.exists()) {
            System.out.println("CSV file not found. Starting with empty bus list.");
            return buses;
        }
        
        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
            // Skip header
            String line = reader.readLine();
            
            // Read each line and convert to Bus object
            while ((line = reader.readLine()) != null) {
                Bus bus = Bus.fromCSV(line);
                if (bus != null) {
                    buses.add(bus);
                }
            }
            System.out.println("Loaded " + buses.size() + " buses from " + CSV_FILE);
        } catch (IOException e) {
            System.out.println("Error reading from CSV file: " + e.getMessage());
        }
        
        return buses;
    }
}

public class BusBookingSystem {
    private static Scanner scanner = new Scanner(System.in);
    private static List<Bus> buses = new ArrayList<>();
    private static List<Booking> bookings = new ArrayList<>();
    private static List<User> users = new ArrayList<>();
    private static SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
    private static SimpleDateFormat timeFormat = new SimpleDateFormat("HH:mm");
    
    // Initialize data
    static {
        // Try to load bus data from CSV file
        buses = FileManager.loadBusesFromCSV();
        
        // If no data was loaded, initialize with default data
        if (buses.isEmpty()) {
            buses.add(new Bus(101, "B101", "New York-Boston", 50, 45.0, "01/03/2025", "08:00", 501, "John Smith"));
            buses.add(new Bus(102, "B102", "Boston-Chicago", 45, 60.0, "01/03/2025", "10:30", 502, "Mary Johnson"));
            buses.add(new Bus(103, "B103", "Chicago-Detroit", 40, 50.0, "02/03/2025", "09:15", 503, "Robert Davis"));
            // Save initial data to CSV
            FileManager.saveBusesToCSV(buses);
        }
        
        User user = new User(1001, "John Doe", "john@example.com", "9876543210");
        users.add(user);
    }

    public static void main(String[] args) {
        displayMainMenu();
    }
    
    private static void displayMainMenu() {
        while (true) {
            System.out.println("\n====================================");
            System.out.println("Welcome to the Bus Booking System!");
            System.out.println("\nAre you an admin or user?: \n1. Admin \n2. User \n3. Exit");
            int roleChoice = getIntInput("Enter your role: ");
            
            if (roleChoice == 1) {
                handleAdminFlow();
            } else if (roleChoice == 2) {
                displayUserMenu();
            } else if (roleChoice == 3) {
                System.out.println("Thank you for using Bus Booking System. Goodbye!");
                scanner.close();
                return;
            } else {
                System.out.println("Invalid choice. Please try again.");
            }
        }
    }
    
    private static void handleAdminFlow() {
        boolean isCorrect = false;
        Set<String> validPasswords = new HashSet<>(Arrays.asList("pheavy", "lyvann", "sreynin"));
        
        while (!isCorrect) {
            System.out.print("Enter Admin Password: ");
            String password = scanner.next();
            scanner.nextLine(); // Consume newline
            
            if (validPasswords.contains(password)) {
                isCorrect = true;
                Admin admin = new Admin(1, "Admin", "admin@example.com", "1234567890");
                displayAdminMenu(admin);
            } else {
                System.out.println("Incorrect password! Try again or press 0 to go back to the main menu.");
                int choice = getIntInput("Enter your choice: ");
                if (choice == 0) {
                    return;
                }
            }
        }
    }
    
    private static void displayAdminMenu(Admin admin) {
        while (true) {
            System.out.println("\nAdmin Menu:");
            System.out.println("1. Add Bus\n2. Edit Bus\n3. Remove Bus\n4. View All Buses\n5. Cancel Booking\n6. View All Bookings\n7. Save Bus Data to CSV\n8. Load Bus Data from CSV\n9. Exit to Main Menu");
            int adminChoice = getIntInput("Enter your choice: ");
            
            switch (adminChoice) {
                case 1:
                    handleAddBus(admin);
                    // Automatically save after adding
                    FileManager.saveBusesToCSV(buses);
                    break;
                case 2:
                    handleEditBus(admin);
                    // Automatically save after editing
                    FileManager.saveBusesToCSV(buses);
                    break;
                case 3:
                    handleRemoveBus(admin);
                    // Automatically save after removing
                    FileManager.saveBusesToCSV(buses);
                    break;
                case 4:
                    showAllBuses();
                    break;
                case 5:
                    handleCancelBooking(admin);
                    break;
                case 6:
                    admin.viewAllBookings(bookings);
                    break;
                case 7:
                    FileManager.saveBusesToCSV(buses);
                    break;
                case 8:
                    buses = FileManager.loadBusesFromCSV();
                    break;
                case 9:
                    // Save changes before exiting
                    FileManager.saveBusesToCSV(buses);
                    return;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }
    
    private static void handleAddBus(Admin admin) {
        System.out.println("\nEnter Bus Details:");
        int id = getIntInput("Bus ID: ");
        System.out.print("Bus Number: ");
        String number = scanner.next();
        scanner.nextLine(); // Consume newline
        System.out.print("Route: ");
        String route = scanner.nextLine();
        int capacity = getIntInput("Capacity: ");
        double price = getDoubleInput("Ticket Price: $");
        
        // Get departure date with validation
        String departureDate = getValidatedDate("Departure Date (DD/MM/YYYY): ");
        
        // Get departure time with validation
        String departureTime = getValidatedTime("Departure Time (HH:MM): ");
        
        // Get driver information
        int driverID = getIntInput("Driver ID: ");
        System.out.print("Driver Name: ");
        String driverName = scanner.nextLine();
        
        admin.addNewBus(buses, new Bus(id, number, route, capacity, price, departureDate, departureTime, driverID, driverName));
    }
    
    private static void handleEditBus(Admin admin) {
        int busID = getIntInput("\nEnter Bus ID to Edit: ");
        Bus bus = admin.searchBusById(buses, busID);
        
        if (bus != null) {
            bus.displayBusInfo();
            System.out.print("Enter New Route: ");
            String route = scanner.nextLine();
            int capacity = getIntInput("Enter New Capacity: ");
            double price = getDoubleInput("Enter New Ticket Price: $");
            
            // Get new departure date with validation
            String departureDate = getValidatedDate("New Departure Date (DD/MM/YYYY): ");
            
            // Get new departure time with validation
            String departureTime = getValidatedTime("New Departure Time (HH:MM): ");
            
            // Get updated driver information
            int driverID = getIntInput("New Driver ID: ");
            System.out.print("New Driver Name: ");
            String driverName = scanner.nextLine();
            
            admin.editBus(buses, busID, route, capacity, price, departureDate, departureTime, driverID, driverName);
        } else {
            System.out.println("Bus not found.");
        }
    }
    
    private static void handleRemoveBus(Admin admin) {
        int busID = getIntInput("\nEnter Bus ID to Remove: ");
        admin.removeBus(buses, busID);
    }
    
    private static void handleCancelBooking(Admin admin) {
        int bookingID = getIntInput("\nEnter Booking ID to Cancel: ");
        admin.cancelBooking(bookings, bookingID);
    }
    
    private static void displayUserMenu() {
        while (true) {
            System.out.println("\nUser Menu:");
            System.out.println("1. Search Bus by Route\n2. Search Bus by Date\n3. View All Available Buses\n4. Book Ticket\n5. View Booking History\n6. Cancel Booking\n7. Exit to Main Menu");
            int userChoice = getIntInput("Enter your choice: ");
            
            switch (userChoice) {
                case 1:
                    handleSearchBusByRoute();
                    break;
                case 2:
                    handleSearchBusByDate();
                    break;
                case 3:
                    showAllBuses();
                    break;
                case 4:
                    handleDirectBookingProcess();
                    // Save bus data after booking to update capacities
                    FileManager.saveBusesToCSV(buses);
                    break;
                case 5:
                    handleViewBookingHistory();
                    break;
                case 6:
                    handleUserCancelBooking();
                    break;
                case 7:
                    return;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }
    
    private static void handleSearchBusByDate() {
        String searchDate = getValidatedDate("\nEnter Date to Search (DD/MM/YYYY): ");
        List<Bus> foundBuses = new ArrayList<>();
        
        for (Bus bus : buses) {
            if (bus.departureDate.equals(searchDate)) {
                foundBuses.add(bus);
            }
        }
        
        if (foundBuses.isEmpty()) {
            System.out.println("No buses found on this date.");
        } else {
            System.out.println("\nBuses available on date '" + searchDate + "':");
            for (Bus bus : foundBuses) {
                bus.displayBusInfo();
            }
        }
    }
    
    // Method to show all available buses
    private static void showAllBuses() {
        if (buses.isEmpty()) {
            System.out.println("\nNo buses available in the system.");
        } else {
            System.out.println("\nAll Available Buses:");
            System.out.println("====================================");
            for (Bus bus : buses) {
                bus.displayBusInfo();
            }
            System.out.println("====================================");
        }
    }
    
    private static void handleSearchBusByRoute() {
        System.out.print("\nEnter Route to Search (e.g., 'City1-City2'): ");
        String route = scanner.nextLine();
        List<Bus> foundBuses = new ArrayList<>();
        
        for (Bus bus : buses) {
            if (bus.route.equalsIgnoreCase(route)) {
                foundBuses.add(bus);
            }
        }
        
        if (foundBuses.isEmpty()) {
            System.out.println("No buses found on this route.");
        } else {
            System.out.println("\nBuses available on route '" + route + "':");
            for (Bus bus : foundBuses) {
                bus.displayBusInfo();
            }
        }
    }
    
    private static void handleDirectBookingProcess() {
        System.out.println("\nAre you an existing user or a new user?");
        System.out.println("1. Existing User\n2. New User\n3. Back to User Menu");
        int choice = getIntInput("Enter your answer: ");
        
        User currentUser = null;
        
        if (choice == 1) {
            int userID = getIntInput("Enter User ID: ");
            currentUser = findUserById(userID);
            
            if (currentUser == null) {
                System.out.println("User not found. Would you like to register as a new user?");
                System.out.println("1. Yes\n2. No, go back to User Menu");
                int registerChoice = getIntInput("Enter your choice: ");
                
                if (registerChoice == 1) {
                    currentUser = registerNewUser();
                } else {
                    return;
                }
            }
        } else if (choice == 2) {
            currentUser = registerNewUser();
        } else {
            return;
        }
        
        if (currentUser != null) {
            bookTicketForUser(currentUser);
        }
    }
    
    private static User registerNewUser() {
        System.out.println("\nEnter User Details:");
        int id = getIntInput("User ID: ");
        System.out.print("Name: ");
        String name = scanner.nextLine();
        System.out.print("Email: ");
        String email = scanner.nextLine();
        System.out.print("Phone Number: ");
        String phone = scanner.nextLine();
        
        User newUser = new User(id, name, email, phone);
        users.add(newUser);
        System.out.println("User registered successfully!");
        return newUser;
    }
    
    private static void handleViewBookingHistory() {
        int userID = getIntInput("\nEnter User ID: ");
        User user = findUserById(userID);
        
        if (user != null) {
            user.viewBookingHistory();
        } else {
            System.out.println("User not found.");
        }
    }
    
    private static void handleUserCancelBooking() {
        int userID = getIntInput("\nEnter User ID: ");
        User user = findUserById(userID);
        
        if (user == null) {
            System.out.println("User not found.");
            return;
        }
        
        if (user.bookingHistory.isEmpty()) {
            System.out.println("You have no bookings to cancel.");
            return;
        }
        
        System.out.println("\nYour Booking History:");
        for (Booking booking : user.bookingHistory) {
            booking.displayBookingInfo();
        }
        
        int bookingID = getIntInput("\nEnter Booking ID to cancel: ");
        Booking bookingToCancel = null;
        
        for (Booking booking : user.bookingHistory) {
            if (booking.bookingID == bookingID) {
                bookingToCancel = booking;
                break;
            }
        }
        
        if (bookingToCancel != null) {
            user.bookingHistory.remove(bookingToCancel);
            bookings.remove(bookingToCancel);
            System.out.println("Booking canceled successfully.");
        } else {
            System.out.println("Booking not found.");
        }
    }
    
    private static User findUserById(int userID) {
        for (User user : users) {
            if (user.userID == userID) {
                return user;
            }
        }
        return null;
    }
    
    private static void bookTicketForUser(User user) {
        // Show all available buses first
        showAllBuses();
        
        // Then search for specific route or date if needed
        System.out.println("\nWould you like to search for buses?");
        System.out.println("1. Search by Route\n2. Search by Date\n3. No, continue with booking");
        int searchChoice = getIntInput("Enter your choice: ");
        
        if (searchChoice == 1) {
            System.out.print("\nEnter Route to Search: ");
            String route = scanner.nextLine();
            List<Bus> foundBuses = user.searchBus(route, buses);
            
            if (foundBuses.isEmpty()) {
                System.out.println("No buses found on this route.");
                return;
            }
            
            System.out.println("\nBuses available on route '" + route + "':");
            for (Bus bus : foundBuses) {
                bus.displayBusInfo();
            }
        } else if (searchChoice == 2) {
            String searchDate = getValidatedDate("\nEnter Date to Search (DD/MM/YYYY): ");
            List<Bus> foundBuses = user.searchBusByDate(searchDate, buses);
            
            if (foundBuses.isEmpty()) {
                System.out.println("No buses found on this date.");
                return;
            }
            
            System.out.println("\nBuses available on date '" + searchDate + "':");
            for (Bus bus : foundBuses) {
                bus.displayBusInfo();
            }
        }
        
        // Select bus and number of passengers
        int busID = getIntInput("Enter Bus ID to book: ");
        Bus selectedBus = null;
        
        for (Bus bus : buses) {
            if (bus.busID == busID) {
                selectedBus = bus;
                break;
            }
        }
        
        if (selectedBus == null) {
            System.out.println("Bus not found with ID: " + busID);
            return;
        }
        
        // Display the selected bus information
        System.out.println("\nSelected Bus Details:");
        selectedBus.displayBusInfo();
        
        int seats = getIntInput("Enter number of seats to book: ");
        
        Booking booking = user.bookTicket(busID, seats, buses, bookings);
        
        if (booking != null) {
            System.out.println("\nBooking successful!");
            System.out.println("Booking Details:");
            booking.displayBookingInfo();
        } else {
            System.out.println("Booking failed. Bus ID not found or insufficient seats available.");
        }
    }
    
    // Helper methods for input handling
    private static int getIntInput(String prompt) {
        while (true) {
            try {
                System.out.print(prompt);
                int input = scanner.nextInt();
                scanner.nextLine(); // Consume newline
                return input;
            } catch (InputMismatchException e) {
                System.out.println("Please enter a valid number.");
                scanner.nextLine(); // Clear the invalid input
            }
        }
    }
    
    private static double getDoubleInput(String prompt) {
        while (true) {
            try {
                System.out.print(prompt);
                double input = scanner.nextDouble();
                scanner.nextLine(); // Consume newline
                return input;
            } catch (InputMismatchException e) {
                System.out.println("Please enter a valid number.");
                scanner.nextLine(); // Clear the invalid input
            }
        }
    }
    
    private static String getValidatedDate(String prompt) {
        while (true) {
            System.out.print(prompt);
            String dateStr = scanner.nextLine();
            try {
                // Validate the date format
                dateFormat.setLenient(false);
                dateFormat.parse(dateStr);
                return dateStr;
            } catch (ParseException e) {
                System.out.println("Invalid date format. Please use DD/MM/YYYY format.");
            }
        }
    }
    
    private static String getValidatedTime(String prompt) {
        while (true) {
            System.out.print(prompt);
            String timeStr = scanner.nextLine();
            try {
                // Validate the time format
                timeFormat.setLenient(false);
                timeFormat.parse(timeStr);
                return timeStr;
            } catch (ParseException e) {
                System.out.println("Invalid time format. Please use HH:MM format (24-hour format).");
            }
        }
    }
}
